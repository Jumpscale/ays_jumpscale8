from JumpScale import j

ActionsBase = j.atyourservice.getActionsBaseClass()


class Actions(ActionsBase):

    def init(self, serviceObj, args):
        super(Actions, self).init(serviceObj, args)

        tls_dir = j.sal.fs.joinPaths(serviceObj.path, 'tls')
        j.sal.fs.createDir(tls_dir)

        if args['initca']:
            tls = j.tools.tls.get(tls_dir)
            subjects = [{
                "C": "AE",
                "L": "Dubai",
                "O": "GreenITGlobe",
                "OU": "0-complexity",
                "ST": "Dubai",
                "CN": "AutoGenerated Root CA - GIG"
            }]

            print("Start generation of the root CA")
            cert, key = tls.createCA(subjects, keyAlgo='rsa', keySize=4096)

            args['ca.cert'] = cert
            args['ca.key'] = key
        args['tls.dir'] = tls_dir

    def build(self, serviceObj):
        deps = ['gcc', 'libltdl-dev']
        for dep in deps:
            if len(j.sal.ubuntu.findPackagesInstalled(dep)) <= 0:
                j.sal.ubuntu.install(dep)

        go = j.atyourservice.getService(name='go')

        go.actions.buildProject(go, package='github.com/cloudflare/cfssl/cmd/...')

        # create paths to binaries
        gopath = go.hrd.getStr('gopath')
        bin_dir = j.sal.fs.joinPaths(gopath, 'bin')
        bin_repo = '/opt/code/git/binary/cfssl'
        cfsll_src = j.sal.fs.joinPaths(bin_dir, 'cfssl')
        cfssljson_src = j.sal.fs.joinPaths(bin_dir, 'cfssljson')
        cfsll_dest = j.sal.fs.joinPaths('/opt/code/git/binary/cfssl', 'cfssl')
        cfssljson_dest = j.sal.fs.joinPaths('/opt/code/git/binary/cfssl', 'cfssljson')

        # copy files to binary repo
        j.sal.fs.createDir(bin_repo)
        j.sal.fs.copyFile(cfsll_src, cfsll_dest, createDirIfNeeded=True, overwriteFile=True)
        j.sal.fs.copyFile(cfssljson_src, cfssljson_dest, createDirIfNeeded=True, overwriteFile=True)